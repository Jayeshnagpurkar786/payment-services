const express = require('express');
const paymentMethod = require('../controllers/paymentMethod');
const { getUserData, paymentMethodHandler } = require('../controllers/extraController');

const router = express.Router();

/**
 * @openapi
 * /create-order:
 *   post:
 *     summary: Create a new payment order
 *     description: |
 *       Creates a new payment order using Razorpay. The order details are returned upon successful creation.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               amount:
 *                 type: integer
 *                 description: The amount for the order in INR
 *                 example: 500
 *     responses:
 *       200:
 *         description: Payment order created successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 id:
 *                   type: string
 *                   description: The unique order ID
 *                   example: "order_D9Rm1J0bTWUsV0"
 *                 amount:
 *                   type: integer
 *                   description: The amount of the order
 *                   example: 50000
 *                 currency:
 *                   type: string
 *                   description: The currency used for the order
 *                   example: "INR"
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 *                   example: "Failed to create Razorpay order"
 *     tags:
 *       - Payments
 */
router.post('/create-order', paymentMethod.createPayment);

/**
 * @openapi
 * /verify-payment:
 *   post:
 *     summary: Verify a payment
 *     description: |
 *       Verifies a payment using Razorpay's webhook signature and updates the order status.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               razorpay_order_id:
 *                 type: string
 *                 description: The order ID generated by Razorpay
 *                 example: "order_D9Rm1J0bTWUsV0"
 *               razorpay_payment_id:
 *                 type: string
 *                 description: The payment ID generated by Razorpay
 *                 example: "pay_9Dk1c2EXy1DaIJ"
 *               razorpay_signature:
 *                 type: string
 *                 description: The signature generated by Razorpay
 *                 example: "c3d5d62d8eb9a2076b63f4a5869bda24f7e04dfb"
 *     responses:
 *       200:
 *         description: Payment verification successful
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   description: Verification status
 *                   example: "ok"
 *       400:
 *         description: Payment verification failed
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   description: Verification status
 *                   example: "verification_failed"
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 *                   example: "Error verifying payment"
 *     tags:
 *       - Payments
 */
router.post('/verify-payment', paymentMethod.verifyPayment);

/**
 * @openapi
 * /refund:
 *   post:
 *     summary: Initiate a payment refund
 *     description: |
 *       Initiates a refund for a payment using Razorpay's API.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               paymentId:
 *                 type: string
 *                 description: The payment ID to refund
 *                 example: "pay_9Dk1c2EXy1DaIJ"
 *               amount:
 *                 type: integer
 *                 description: The amount to be refunded in INR
 *                 example: 500
 *     responses:
 *       200:
 *         description: Refund initiated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Success message
 *                   example: "Refund initiated successfully"
 *                 refund:
 *                   type: object
 *                   description: Refund details
 *       500:
 *         description: Failed to initiate refund
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message
 *                   example: "Failed to initiate refund"
 *     tags:
 *       - Payments
 */
router.post('/refund', paymentMethod.paymentRefund);

/**
 * @openapi
 * /getAllOrders:
 *   get:
 *     summary: Retrieve all orders
 *     description: |
 *       Retrieves a list of all orders from the database.
 *     responses:
 *       200:
 *         description: List of all orders
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   id:
 *                     type: integer
 *                     description: Unique identifier for the order
 *                     example: 1
 *                   order_id:
 *                     type: string
 *                     description: Order ID
 *                     example: "order_D9Rm1J0bTWUsV0"
 *                   amount:
 *                     type: integer
 *                     description: Amount of the order
 *                     example: 50000
 *                   currency:
 *                     type: string
 *                     description: Currency used for the order
 *                     example: "INR"
 *                   receipt:
 *                     type: string
 *                     description: Receipt identifier
 *                     example: "receipt_1618928414852"
 *                   status:
 *                     type: string
 *                     description: Status of the order
 *                     example: "paid"
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 *                   example: "Failed to fetch orders"
 *     tags:
 *       - Orders
 */
router.get('/getAllOrders', paymentMethod.getAllOrders);

module.exports = router;
